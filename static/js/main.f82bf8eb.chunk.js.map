{"version":3,"sources":["contexts/Timer/context.js","contexts/Timer/useTimer.js","components/FormInput/FormInput.styles.js","components/FormInput/index.js","components/FormInput/FormInput.component.jsx","App.styles.js","App.js","contexts/Timer/utils.js","contexts/Timer/provider.jsx","index.js"],"names":["createContext","useTimer","context","useContext","TimerContext","Error","subColor","shrinkLabel","Group","styled","div","Label","label","props","isValueEmpty","disabled","Input","input","FormInput","otherProps","id","name","htmlFor","value","length","Container","TimerContainer","span","Button","button","disableHover","App","useState","startDate","endDate","useCurrentDate","dates","setDates","setStartDate","setEndDate","elapsedTime","handleInputChange","target","type","checked","onSubmit","e","preventDefault","Date","toISOString","onChange","formatTime","timeInMs","seconds","Math","floor","minutes","hours","padNum","num","toString","padStart","calcDuration","startDateInMs","getTime","endDateInMs","now","abs","SET_START_DATE","SET_END_DATE","SET_DURATION","initialState","duration","reducer","state","action","TimerProvider","children","useReducer","dispatch","useCallback","sDate","eDate","setDuration","useEffect","intervalId","window","setInterval","clearInterval","useMemo","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f82bf8eb.chunk.js","sourcesContent":["import { createContext } from 'react'\n\nexport default createContext(null)\n","import { useContext } from 'react'\nimport TimerContext from './context'\n\nconst useTimer = () => {\n\tconst context = useContext(TimerContext)\n\n\tif (!context) {\n\t\tthrow new Error('Timer context must be consumed inside the Timer Provider')\n\t}\n\n\treturn context\n}\n\nexport default useTimer\n","import styled from 'styled-components'\n\nconst subColor = 'white'\nconst mainColor = 'white'\nconst shrinkLabel = `\n  top: 10px;\n  font-size: 12px;\n  color: ${mainColor};\n`\n\nexport const Group = styled.div`\n\tposition: relative;\n\tmargin: 45px 0;\n`\n\nexport const Label = styled.label`\n\tcolor: ${subColor};\n\tfont-weight: normal;\n\tposition: absolute;\n\tpointer-events: none;\n\tleft: 5px;\n\ttop: 35px;\n\ttransition: 300ms ease all;\n\t${(props) => !props.isValueEmpty && shrinkLabel}\n\t${({ disabled }) => {\n\t\tif (disabled) {\n\t\t\treturn `color: grey;`\n\t\t}\n\t}}\n`\n\nexport const Input = styled.input`\n\tbackground-color: transparent;\n\tcolor: ${subColor};\n\tpadding: 10px 10px 10px 5px;\n\tfont-size: 1rem;\n\tdisplay: block;\n\tborder: none;\n\tborder-bottom: 1px solid ${subColor};\n\tmargin: 25px 0;\n\twidth: 20rem;\n\n\t&:focus {\n\t\toutline: none;\n\t}\n\n\t&:focus ~ ${Label} {\n\t\t${shrinkLabel}\n\t}\n\n\t${({ disabled }) => {\n\t\tif (disabled) {\n\t\t\treturn `\n\t\t\t\tcolor: grey;\n\t\t\t\tborder-bottom: 1px solid grey;\n\t\t\t`\n\t\t}\n\t}}\n`\n","import FormInput from './FormInput.component'\n\nexport default FormInput\n","import React from 'react'\nimport { Group, Input, Label } from './FormInput.styles'\n\nconst FormInput = ({ label, ...otherProps }) => (\n\t<Group>\n\t\t<Input id={otherProps.id || otherProps.name} {...otherProps} />\n\t\t{label && (\n\t\t\t<Label htmlFor={otherProps.id} isValueEmpty={!otherProps.value.length}>\n\t\t\t\t{label}\n\t\t\t</Label>\n\t\t)}\n\t</Group>\n)\n\nexport default FormInput\n","import styled from 'styled-components'\n\nexport const Container = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\tjustify-content: center;\n\talign-items: center;\n`\n\nexport const TimerContainer = styled.span`\n\tborder: 1px solid white;\n\tborder-radius: 10px;\n\tpadding: 15px;\n\tposition: relative;\n\ttop: 1.5rem;\n`\n\nexport const Button = styled.button`\n\tborder: none;\n\theight: 2rem;\n\tpadding: 0 2rem;\n\tmargin: 1rem;\n\tborder-radius: 0.6rem;\n\tcolor: white;\n\tbackground-color: #2e3845;\n\tfont-size: 1rem;\n\tfont-weight: 600;\n\tline-height: 1.7rem;\n\ttext-align: center;\n\tcursor: pointer;\n\tdisplay: inline-flex;\n\talign-items: center;\n\tjustify-content: center;\n\n\ttransition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,\n\t\tbox-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,\n\t\tborder 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n\n\t${({ disableHover }) => {\n\t\tif (!disableHover) {\n\t\t\treturn `&:hover {\n\t\t\t\tbackground-color: #008CF6;\n\t\t\t}`\n\t\t}\n\t}}\n`\n","/*\nThe goal is to build a duration timer that shows elapsed\ntime between two given dates - startDate and endDate where\nthe latter is optionally provided.\n\nThe output should be in the format of [hh]hh:mm:ss\n01:45:08, 00:05:20, 100:00:00, 5000:00:00 and so on.\nHours should be min 2 characters but can be more if needed.\n\nThe endDate is optional.\n    If not provided the timer should use the current time\n    and keep counting up indefinitely\n    \n    If provided the timer should just show the duration\n    between the two dates and exit. It should not count up.\n\n    Sample Times:\n    new Date(\"2020-10-10T00:00:00Z\")\n    new Date(\"2020-10-10T10:10:10Z\")\n\n\n    Test Cases:\n\n    1. Only the startDate is provided (no endDate)\n        inputs: \n        startDate = 2021-09-23T00:00:00Z\n        endDate = current time ( Date.now() ) = 2021-09-23T00:00:00Z\n\n        outputs: 00:00:00, 00:00:01, 00:00:02, 00:00:03, ...\n\n    2. Both the startDate and endDate are provided\n        inputs:\n        startDate = 2021-09-23T00:00:00Z\n        endDate = 2021-09-24T10:15:20Z\n\n        output: 34:15:20\n\n*/\n\nimport React, { useState } from 'react'\nimport useTimer from './contexts/Timer/useTimer'\nimport FormInput from './components/FormInput'\nimport { TimerContainer, Button, Container } from './App.styles'\n\nconst App = () => {\n\tconst [dates, setDates] = useState({\n\t\tstartDate: '',\n\t\tendDate: '',\n\t\tuseCurrentDate: false\n\t})\n\tconst { setStartDate, setEndDate, elapsedTime } = useTimer()\n\n\tconst startTimer = (e) => {\n\t\te.preventDefault()\n\t\tconst { startDate, endDate } = dates\n\t\tif (startDate || dates.useCurrentDate) {\n\t\t\tsetStartDate(dates.useCurrentDate ? new Date().toISOString() : startDate)\n\t\t\tsetEndDate(endDate)\n\t\t}\n\t}\n\n\tconst handleInputChange = ({ target }) => {\n\t\tsetDates({\n\t\t\t...dates,\n\t\t\t[target.name]: target.type === 'checkbox' ? target.checked : target.value\n\t\t})\n\t}\n\n\treturn (\n\t\t<Container>\n\t\t\t<TimerContainer>{elapsedTime}</TimerContainer>\n\t\t\t<form onSubmit={startTimer}>\n\t\t\t\t<FormInput\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tname=\"startDate\"\n\t\t\t\t\tid=\"start_date\"\n\t\t\t\t\tlabel=\"Start Date (ISO Format)\"\n\t\t\t\t\tonChange={handleInputChange}\n\t\t\t\t\tvalue={dates.useCurrentDate ? 'Current Date' : dates.startDate}\n\t\t\t\t\tdisabled={dates.useCurrentDate}\n\t\t\t\t/>\n\t\t\t\t<label>\n\t\t\t\t\tUse the current date &nbsp;\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\tname=\"useCurrentDate\"\n\t\t\t\t\t\tid=\"current_date\"\n\t\t\t\t\t\tonChange={handleInputChange}\n\t\t\t\t\t\tchecked={dates.useCurrentDate}\n\t\t\t\t\t/>\n\t\t\t\t</label>\n\t\t\t\t<FormInput\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tname=\"endDate\"\n\t\t\t\t\tid=\"end_date\"\n\t\t\t\t\tlabel=\"End Date (ISO Format)\"\n\t\t\t\t\tonChange={handleInputChange}\n\t\t\t\t\tvalue={dates.endDate}\n\t\t\t\t/>\n\t\t\t\t<Button type=\"submit\">Start</Button>\n\t\t\t</form>\n\t\t</Container>\n\t)\n}\n\nexport default App\n","export const formatTime = (timeInMs) => {\n\tconst seconds = Math.floor((timeInMs / 1000) % 60)\n\tconst minutes = Math.floor((timeInMs / (1000 * 60)) % 60)\n\tconst hours = Math.floor(timeInMs / (1000 * 60 * 60))\n\tconst padNum = (num) => num.toString().padStart(2, '0')\n\n\treturn `${padNum(hours)}:${padNum(minutes)}:${padNum(seconds)}`\n}\n\nexport const calcDuration = (startDate, endDate) => {\n\tconst startDateInMs = startDate.getTime()\n\tconst endDateInMs = endDate ? endDate.getTime() : Date.now()\n\treturn Math.abs(endDateInMs - startDateInMs)\n}\n","import React, { useEffect, useMemo, useReducer, useCallback } from 'react'\nimport TimerContext from './context'\nimport { formatTime, calcDuration } from './utils'\n\nconst SET_START_DATE = 'SET_START_DATE'\nconst SET_END_DATE = 'SET_END_DATE'\nconst SET_DURATION = 'SET_DURATION'\n\nconst initialState = {\n\tduration: 0,\n\tstartDate: '',\n\tendDate: ''\n}\n\nconst reducer = (state, action) => {\n\tswitch (action.type) {\n\t\tcase SET_START_DATE: {\n\t\t\treturn { ...state, startDate: action.startDate }\n\t\t}\n\t\tcase SET_END_DATE: {\n\t\t\treturn { ...state, endDate: action.endDate }\n\t\t}\n\t\tcase SET_DURATION: {\n\t\t\treturn { ...state, duration: action.duration }\n\t\t}\n\t\tdefault:\n\t\t\tthrow new Error('Unexpected action type')\n\t}\n}\n\nconst TimerProvider = ({ children }) => {\n\tconst [{ duration, startDate, endDate }, dispatch] = useReducer(\n\t\treducer,\n\t\tinitialState\n\t)\n\tconst setStartDate = useCallback(\n\t\t(sDate) => dispatch({ type: SET_START_DATE, startDate: sDate }),\n\t\t[]\n\t)\n\tconst setEndDate = useCallback(\n\t\t(eDate) => dispatch({ type: SET_END_DATE, endDate: eDate }),\n\t\t[]\n\t)\n\tconst setDuration = useCallback(\n\t\t(duration) => dispatch({ type: SET_DURATION, duration }),\n\t\t[]\n\t)\n\n\tuseEffect(() => {\n\t\tif (startDate) {\n\t\t\tlet intervalId\n\t\t\tif (!endDate) {\n\t\t\t\tintervalId = window.setInterval(() => {\n\t\t\t\t\tsetDuration(calcDuration(new Date(startDate)))\n\t\t\t\t}, 1000)\n\t\t\t\treturn () => clearInterval(intervalId)\n\t\t\t} else {\n\t\t\t\tclearInterval(intervalId)\n\t\t\t\tsetDuration(calcDuration(new Date(startDate), new Date(endDate)))\n\t\t\t}\n\t\t}\n\t}, [startDate, endDate, setDuration])\n\n\tconst value = useMemo(\n\t\t() => ({\n\t\t\tsetStartDate,\n\t\t\tsetEndDate,\n\t\t\telapsedTime: formatTime(duration)\n\t\t}),\n\t\t[duration, setStartDate, setEndDate]\n\t)\n\n\treturn <TimerContext.Provider value={value}>{children}</TimerContext.Provider>\n}\n\nexport default TimerProvider\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport TimerProvider from './contexts/Timer/provider'\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<TimerProvider>\n\t\t\t<App />\n\t\t</TimerProvider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n)\n"],"sourceRoot":""}